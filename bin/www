#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('moonshine-stream2:server');
var http = require('http');
var mongoose = require('mongoose');
mongoose.Promise = global.Promise;
var Transaction = require('../models/transaction')
var Return = require('../models/return')

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app).listen(port);

/**
 * Listen on provided port, on all network interfaces.
 */

// server.listen(port);
// server.on('error', onError);
// server.on('listening', onListening);

var intervalData
io = require('socket.io').listen(server, {log: true});
io.sockets.on('connection', (socket)=>{
  Transaction.find({})
               .sort({sell_time:1})
               .exec((err, transactions)=>{
                  Return.find({})
                    .sort({time:1})
                    .exec((err2, returns)=>{
                      socket.emit('dataSet', {
                         x:transactions.map(d=> { return d.sell_time.toJSON()}),
                        y:transactions.map(d=>{return 100*(d.sell_price - d.buy_price)/d.buy_price}),
                        x2:returns.map(d=>{return d.time.toJSON()}),
                        y2:returns.map(d=>{return d.returns})
                      })
                    })
               })
  var interval = setInterval(()=>{
    // var randomData = getData();
    Transaction.find({})
               .sort({sell_time:1})
               .exec((err, transactions)=>{
                  Return.find({})
                    .sort({time:1})
                    .exec((err2, returns)=>{
                      socket.emit('dataSet', {
                         x:transactions.map(d=> { return d.sell_time.toJSON()}),
                        y:transactions.map(d=>{return 100*(d.sell_price - d.buy_price)/d.buy_price}),
                        x2:returns.map(d=>{return d.time.toJSON()}),
                        y2:returns.map(d=>{return d.returns})
                      })
                    })
               })
    
    // socket.emit('dataSet', randomData)
  }, 30000);
  socket.on('updateInterval', (intervalData)=>{
    clearInterval(interval);
    interval = setInterval(()=>{
      var randomData = [1,2,3,4];
      socket.emit('dataSet', randomData)
    }, intervalData);
  });
});
/*
*
*/
getData = () => {
  Return.find({})
        .sort({time:1})
        .exec((err2, returns)=>{
          // console.log(returns)
          return JSON.stringify(returns.toJSON);
        })
  // Transaction.find({})
  //       .sort({sell_time:1})
  //       .exec((err, transactions)=>{
  //         Return.find({})
  //             .sort({time:1})
  //             .exec((err2, returns)=>{
  //               // return {
  //                 // x:transactions.map(d=> { return d.sell_time.toJSON()}),
  //                 // y:transactions.map(d=>{return 100*(d.sell_price - d.buy_price)/d.buy_price}),
  //                 // x2:returns.map(d=>{return d.time.toJSON()}),
  //                 // y2:returns.map(d=>{return d.returns})
  //               // }
  //               return [1,2,3,4]
  //             })
  //       })
}

/*
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
